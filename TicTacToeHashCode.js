//TTTHC class


//TODO ISSUE IS THAT CELLS are being treated like an arraylist with lines just being appended to the end
//TODO everything needs to be false inside, then



class TicTacToeHashCode { //s: 9 char string
  constructor() {
    this.winners = []; //boolean
    this.powsOf3 = [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]; //for quick referencing
    this.cells = [];

    //Link cells to elements
    for (var i = 0; i < 9; i++) {
      this.cells[i] = $('#cell-' + i.toString());
    }

    for(var i = 0; i < this.powsOf3[9]; i++){
      this.winners[i] = false;
    }

    var _that_ = this;
    this.loadWinners(_that_);
    this.randomize(); //start with random cell setup
    this.showIsWin();
  }

  /**
   * A method which pulls a String representing the Board's configuration and returns an int representing it's unique value
   * 								to be matched to the winners[] lookup table.
   * @method hash
   * @return the integer representing the index of the current game state in the winners[] lookup table
   */
  hash() {
    var sum = 0; //The value which is returned
    var move = -1; //hash value of the current character

    for (var r = 0; r < 3; r++) { //Iterates through the rows of the Board
      for (var c = 0; c < 3; c++) { //Iterate through the cols of the Board
        var current = this.charAtO(r, c); //gets the current character of the Board at [r][c]
        move = this.charCodeO(current); //Gets the hashCode of the current character

        if (move >= 0) { //Ensures it's valid character
          var i = r * 3 + c; //Convert from matrix index to 1D array index
          sum += move * this.powsOf3[i]; //The algorithm itself : the sum for all characters of (charCode * (3 ^ position) )
        } else return -2; //invalid char
      }
    }
    return sum;
  }

  /**
   * A helper method which accepts a character, checks if it is a valid Board token, and returns an integer representing its individual hashCode value
   * @method charCodeO
   * @param x the character to be evaluated
   * @return the integer representing the character's unique hashCode
   * @OVERRIDE
   */
  charCodeO(x) { //O FOR OVERRIDe
    //Use single quotes to indicate it's a char not a String
    if (x == ' ') return 0;
    if (x == 'X') return 1;
    if (x == 'O') return 2;
    return -1; //invalid char
  }

  /**
   * A helper method which accepts 2 indices for the buttons array and returns the character at that position
   * @method charAt
   * @param row an integer representing the index for the 'row' of the buttons array
   * @param col an integer representing the index for the 'col' of the buttons array
   * @return the character at that position in the 2D buttons array
   * @OVERRIDE
   */
  charAtO(row, col) {
    var index = row + col * 3; //Magic formula
    return $('#cell-' + index.toString()).text();
  }

  /**
   * A method which pulls a String from the Board and returns whether or not it is a winning and valid configuration
   * @method isWin
   * @return true if the Board configuration corresponds to a winning Board, false if it corresponds to a losing/invalid Board
   */
  isWin() {
    return this.winners[this.hash()];
  }

  //constructor helpers//

  loadWinners(t) {
    //Read in the winners file and make each line a new element
    //var = this; //JS y u so silly [[scope issue]]

    $.get('winners.txt', function(data) {
      t.winners = data.split('\n'); //Split into a fat array //TODO THIS OVERRIDES 

      for (var line = 0; line < t.winners.length; line++) {
        //Need to set the board so values get set as true
        t.setBoard(line);
        t.winners[t.hash()] = true; //sets each value at the index generated by the myHashCode() method to true
      }
    }, 'text');

  }

  randomize() {
    //select random values for the starting board
    for (var i = 0; i < this.cells.length; i++) {
      var ch = this.getRandomChar();
      this.cells[i].text(ch);
    }

    this.showIsWin(); //update the element
  }

  //Helper function which generates a random character {X, O}
  getRandomChar() {
    var r = Math.floor(Math.random() * 100);
    //console.log(r + " even? " + (r%2 == 0) );
    if (r <= 33) {
      return "X";
    } else if (r <= 66) {
      return " ";
    } else {
      return "O";
    }
  }

  showIsWin() {
    $('#is-win').text('is win: ' + this.isWin());
  }

  //Accepts a string from winners.txt, sets board to that conf, runs hash, and sets
  setBoard(str) {
    for (var i = 0; i < str.length; i++) {
      var ch = str.charAt(i);
      this.cells[i] = ch;
      //$('#cell-' + i.toString()).text(ch);
    }
  }

}
