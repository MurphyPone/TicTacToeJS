//TTTHC class
class TicTacToeHashCode { //s: 9 char string
  constructor(s, cells) {
    this.winners = [Math.pow(3, 9)]; //init with size
    this.powsOf3 = [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]; //for quick referencing
    this.str = s;

    //Read in the winners file and make each line a new element
    $.get('winners.txt', function(data) {
      this.winners = data.split('\n'); //Split into a fat array
    }, 'text');
  }


  configure() { //Must be called after constructor
    for (var line = 0; line < this.winners.length; line++) {
      //console.log(this.winners[line]);
      this.winners[this.hash()] = true; //sets each value at the index generated by the myHashCode() method to true
    }
  }

  /**
   * A method which pulls a String representing the Board's configuration and returns an int representing it's unique value
   * 								to be matched to the winners[] lookup table.
   * @method hash
   * @return the integer representing the index of the current game state in the winners[] lookup table
   */
   hash() {
    var sum = 0; //The value which is returned
    var move = -1; //hash value of the current character

    for (var r = 0; r < 3; r++) { //Iterates through the rows of the Board
      for (var c = 0; c < 3; c++) { //Iterate through the cols of the Board
        var current = this.charAt(r, c); //gets the current character of the Board at [r][c]
        move = charCode(current); //Gets the hashCode of the current character

        if (move >= 0) { //Ensures it's valid character
          var i = r * 3 + c; //Convert from matrix index to 1D array index
          sum += move * this.powsOf3[i]; //The algorithm itself : the sum for all characters of (charCode * (3 ^ position) )
        } else return -2; //invalid char
      }
    }
    return sum;
  }

  /**
	 * A helper method which accepts a character, checks if it is a valid Board token, and returns an integer representing its individual hashCode value
	 * @method charCode
	 * @param x the character to be evaluated
	 * @return the integer representing the character's unique hashCode
	 */
 	charCode(x) {
 		//Use single quotes to indicate it's a char not a String
 		if( x == ' ') return 0;
 		if( x == 'X') return 1;
 		if( x == 'O') return 2;
 		return -1; //invalid char
 	}

  /**
	 * A helper method which accepts 2 indices for the buttons array and returns the character at that position
	 * @method charAt
	 * @param row an integer representing the index for the 'row' of the buttons array
	 * @param col an integer representing the index for the 'col' of the buttons array
	 * @return the character at that position in the 2D buttons array
	 */
	charAt( row, col) {
		var value = this.cells[row][col].text();
		if (value.length() > 0)
			return value.charAt(0);
		else
			return '*';
	}

  /**
	 * A method which accepts a String representing a Board configuration and returns whether or not it is a winning and valid configuration
	 * @method isWin
	 * @param s the String configuration of the Board
	 * @return true if the String corresponds to a winning Board, false if it corresponds to a losing/invalid Board
	 */
 	isWin(s) {
		 if( this.isValid(s) ) return winners[this.hash(s)];
		 else return false;
	}

  /**
	 * A method which pulls a String from the Board and returns whether or not it is a winning and valid configuration
	 * @method isWin
	 * @return true if the Board configuration corresponds to a winning Board, false if it corresponds to a losing/invalid Board
	 */
	isWin() {
		return winners[this.hash()];
  }



}
